.. _user_guide.quickstart.real_case_france:

==================
Real case - France
==================

A real case on the entire France is considered.

First, open a Python interface:

.. code-block:: none

    python3
    
-------
Imports
-------

.. jupyter-execute::
    
    import smash
    from smash.factory import load_dataset, generate_mesh
    import numpy as np
    import matplotlib.pyplot as plt
    from matplotlib.colors import LogNorm, SymLogNorm

---------------------   
Model object creation
---------------------

Creating a :class:`.Model` requires two input arguments: ``setup`` and ``mesh``. For this case, it is possible to directly load the both input dictionnaries using the :meth:`smash.factory.load_dataset` method, lastly imported.

.. jupyter-execute::

    setup, mesh = load_dataset("France")

.. note::

    The :ref:`user_guide.quickstart.real_case_france` is very similar to the :ref:`user_guide.quickstart.real_case_cance` except that here we do not consider catchments but a domain to make a simulation.

Setup argument
**************
    
Compared to the :ref:`user_guide.quickstart.real_case_cance`, less options have been filled in the ``setup`` dictionary.

.. jupyter-execute::

    setup

.. note::
    We won't read any observed discharge because we are not working on catchment entities but domain.

.. _user_guide.quickstart.real_case_france.mesh_argument:

Mesh argument
*************

Mesh composition
''''''''''''''''

.. jupyter-execute::

    mesh.keys()

Same as ``setup``, compared to the :ref:`user_guide.quickstart.real_case_cance`, less options have been filled in the ``mesh`` dictionary. All gauge specific options are not used in this case (i.e. ``code``, ``area``, ``gauge_pos`` ...).

We can still visualize the extent of the grid.

.. jupyter-execute::

    mesh["nrow"], mesh["ncol"]

We can plot the flow directions and flow accumulation on the active cells.

.. jupyter-execute::

    mesh["flwdir"] = np.ma.masked_where(mesh["active_cell"] == 0, mesh["flwdir"])
    plt.imshow(mesh["flwdir"]);
    plt.colorbar(label="Flow direction (D8)");
    plt.title("Real case - France - Flow direction");


.. jupyter-execute::
    
    mesh["flwacc"] = np.ma.masked_where(mesh["active_cell"] == 0, mesh["flwacc"])
    plt.imshow(mesh["flwacc"], norm=LogNorm());
    plt.colorbar(label="Flow accumulation (mÂ²)");
    plt.title("Real case - France - Flow accumulation");

This mesh can also be automatically generated by providing to the :meth:`smash.factory.generate_mesh` method lastly imported. As in :ref:`user_guide.quickstart.real_case_cance`, we need to the France flow directions and the bouding box ``(xmin, xmax, ymin, ymax)``. The user must indicate is smash directory to access to the datasets.

.. jupyter-execute::
        
    france_bbox = (100_000, 1_250_000, 6_050_000, 7_125_000)

    mesh2 = smash.factory.generate_mesh(
        flwdir_path = "../smash/factory/dataset/France_flwdir.tif",
        bbox=france_bbox
    )

This ``mesh2`` created is a dictionnary which is identical to the ``mesh`` loaded with the :meth:`smash.load_dataset` method.

.. jupyter-execute::
    
    mesh2["nrow"], mesh2["ncol"]

Finally, create the :class:`smash.Model` object using the ``setup`` and ``mesh`` loaded.

.. jupyter-execute::

    model = smash.Model(setup, mesh)

    model

---
Run 
---

Forward run
***********

Make a forward run using the :meth:`.Model.run` method.

.. jupyter-execute::

    res = model.forward_run(return_options={"q_domain": True});
    qsim = res.q_domain[..., -1]
    qsim = np.where(model.mesh.active_cell == 0, np.nan, qsim)
   
    
We can visualize the simulated discharges after a forward run on the whole domain. Here for the last time step of simulation.

.. jupyter-execute::
    
    plt.imshow(qsim, norm=SymLogNorm(1e-4));
    plt.colorbar(label="Discharge $(m^3/s)$");
    plt.title("Real case - France - Discharge");


We can visualize the precipitation for the same time step. In addition to masking the non active cells, we mask the cells where there is no precipitation data (i.e. precipitation lower than 0).

.. jupyter-execute::

    prcp = model.atmos_data.prcp[..., -1]
    prcp = np.where(
        np.logical_or(model.mesh.active_cell == 0, prcp < 0),
        np.nan,
        prcp
    )

    plt.imshow(prcp);
    plt.colorbar(label="Precipitation (mm/h)");
    plt.title("Real case - France - Precipitation");


.. jupyter-execute::
    :hide-code:
    
    plt.close('all')
